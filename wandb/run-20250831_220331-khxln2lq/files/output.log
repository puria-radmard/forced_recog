Logged run to: results_and_data/results/e1_temperature_comparison/llama_3_forward_training_test/train/forwardsft_runs.txt
Loading model: meta-llama/Llama-3.1-8B-Instruct
Loading checkpoint shards: 100%|███████████████████████████████████████████████████████████████| 4/4 [00:06<00:00,  1.59s/it]
Loading SFT training data...
Loading results_and_data/results/e1_temperature_comparison/llama_3_forward_training_test/train/model_summaries/T0.0_trial0_stylesun.csv
Found 1 trial files
Combined data: 850 training examples from 1 trials
Loaded 850 training examples
Creating training pairs...
Creating training pairs: 100%|███████████████████████████████████████████████████████████| 850/850 [00:00<00:00, 7060.22it/s]
Setting up LoRA...
LoRA model setup complete. Trainable parameters: 6815744
Starting training: 3 epochs, 850 examples, batch size 2

Epoch 1/3
Epoch 1:   0%|▏                                                                              | 1/425 [00:02<14:48,  2.09s/it]
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/homes/pr450/repos/mr_repos/forced_recog/forward_sft.py", line 389, in <module>
    main()
  File "/homes/pr450/repos/mr_repos/forced_recog/forward_sft.py", line 334, in main
    loss.backward()
  File "/scratch/anaconda3/envs/myenv/lib/python3.11/site-packages/torch/_tensor.py", line 626, in backward
    torch.autograd.backward(
  File "/scratch/anaconda3/envs/myenv/lib/python3.11/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/scratch/anaconda3/envs/myenv/lib/python3.11/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.45 GiB. GPU 1 has a total capacity of 23.58 GiB of which 925.12 MiB is free. Including non-PyTorch memory, this process has 22.66 GiB memory in use. Of the allocated memory 21.25 GiB is allocated by PyTorch, and 1.15 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
